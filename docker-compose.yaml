services:
  balance-service:
    container_name: balance-service
    build:
      context: ./balance-service
      dockerfile: Dockerfile
      args:
        BALANCE_APP_PORT: ${BALANCE_APP_PORT} # for building the image
    ports:
      - "${BALANCE_APP_PORT:-8080}:${BALANCE_APP_PORT:-8080}" # host:container will have the same port
    environment:
      - BALANCE_APP_PORT=${BALANCE_APP_PORT} # for runtime
      - DB_HOST=${BALANCE_DB_HOST}
      - DB_PORT=${BALANCE_DB_PORT}
      - DB_NAME=${BALANCE_DB_NAME}
      - DB_USER=${BALANCE_DB_USER}
      - DB_PASSWORD=${BALANCE_DB_PASSWORD}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
    depends_on:
      postgresdb:
        condition: service_healthy
      kafka:
        condition: service_healthy

  postgresdb:
    image: postgres:15
    container_name: postgresdb
    hostname: postgresdb
    environment:
      POSTGRES_USER: ${BALANCE_DB_USER}
      POSTGRES_PASSWORD: ${BALANCE_DB_PASSWORD}
      POSTGRES_DB: ${BALANCE_DB_NAME}
    ports:
      - "${BALANCE_DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BALANCE_DB_USER} -d ${BALANCE_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./balance-service/.docker/initdb:/docker-entrypoint-initdb.d
  
  migrate-balance:
    image: migrate/migrate
    container_name: migrate-balance
    depends_on:
      postgresdb:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://${BALANCE_DB_USER}:${BALANCE_DB_PASSWORD}@postgresdb:5432/${BALANCE_DB_NAME}?sslmode=disable",
      "-verbose",
      "up"
    ]
    volumes:
      - ./balance-service/database/migrations:/migrations

  core-service:
    container_name: core-service
    build: 
      context: ./core-service
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - DB_HOST=${CORE_DB_HOST}
      - DB_PORT=${CORE_DB_PORT}
      - DB_NAME=${CORE_DB_NAME}
      - DB_USER=${CORE_DB_USER}
      - DB_PASSWORD=${CORE_DB_PASSWORD}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy

  mysql:
    container_name: mysql
    image: mysql:5.7
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: ${CORE_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${CORE_DB_NAME}
      MYSQL_PASSWORD: ${CORE_DB_PASSWORD}
    ports:
      - 3306:3306
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 5s
      retries: 10
    volumes:
      - mysql_db_data:/var/lib/mysql
      - ./core-service/.docker/initdb:/docker-entrypoint-initdb.d

  zookeeper:
    image: "confluentinc/cp-zookeeper:6.1.0"
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      # TZ: Sao_Paulo/Brazil
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: "confluentinc/cp-enterprise-kafka:6.1.0"
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
    # Exposes 9092 for external connections to the broker
    # Use kafka:29092 for connections internal on the docker network
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - '9092:9092'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${KAFKA_BROKER}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

volumes:
  postgres_data:
  mysql_db_data:
